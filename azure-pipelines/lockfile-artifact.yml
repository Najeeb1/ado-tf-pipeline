trigger:
  branches:
    include:
      - main  # Trigger pipeline on commits to the main branch

pool:
  name: 'Default'

variables:
  terraformVersion: '1.5.5'  # Specify the Terraform version
  azureServiceConnection: 'azurerm'  # Azure service connection name
  backendResourceGroup: 'skink-rg' # Remote backend Resource Group
  backendStorageAccount: 'skinktfstate'  # Remote backend storage account
  backendContainer: 'tfstate'  # Remote backend storage container
  backendKey: 'terraform.tfstate'  # State file name in remote backend

stages:
  # Stage 1: Initialization
  - stage: Initialization
    jobs:
      - job: TerraformInit
        steps:
          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(terraformVersion)

          # Initialize Terraform backend
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              backendServiceArm: $(azureServiceConnection)
              backendAzureRmResourceGroupName: $(backendResourceGroup)
              backendAzureRmStorageAccountName: $(backendStorageAccount)
              backendAzureRmContainerName: $(backendContainer)
              backendAzureRmKey: $(backendKey)
              command: 'init'
              workingDirectory: 'terraform'

          # Validate Terraform configuration
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: 'terraform'

          # Publish Terraform configuration (not the .terraform folder)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'terraform'
              artifactName: 'terraform-state'

  # Stage 2: Plan
  - stage: Plan
    dependsOn: Initialization
    jobs:
      - job: TerraformPlan
        steps:
          # Install Terraform again (fresh agent)
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(terraformVersion)

          # Download Terraform configuration artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'terraform-state'
              downloadPath: 'terraform'

          # Initialize Terraform (downloads provider binaries)
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform'

          # Run Terraform plan
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: $(azureServiceConnection)
              workingDirectory: 'terraform'

  # Stage 3: Apply
  - stage: Apply
    dependsOn: Plan
    jobs:
      - job: TerraformApply
        steps:
          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(terraformVersion)

          # Download Terraform configuration artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'terraform-state'
              downloadPath: 'terraform'

          # Initialize Terraform (downloads provider binaries)
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform'

          # Apply Terraform changes
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              backendServiceArm: $(azureServiceConnection)
              commandOptions: '--auto-approve'
              environmentServiceNameAzureRM: $(azureServiceConnection)
              workingDirectory: 'terraform'
